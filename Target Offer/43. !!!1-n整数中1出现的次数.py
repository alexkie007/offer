'''
求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？
为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。
ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数。
'''
"""
百位数字>=2  example: 31256  当其百位为>=时，有以下这些情况满足(为方便起见，计312为a，56为b)：
  100 ~   199
  1100 ~  1199
 .....
 31100 ~ 31199
 余下的都不满足！
因此，百位>=2的5位数字，其百位为1的情况有（a/10+1）*100个数字   （a/10+1）=>对应于 0 ~ 31，且每一个数字，对应范围是100个数（末尾0-99）
百位数字 ==1 example: 31156 当其百位为1时，有以下这些情况满足：
    100 ~   199
    1100 ~  1199
    ......
    30100 ~ 30199
    31100 ~ 31156
因此，百位为1的5位数字，共有（a/10）*100+(b+1)
百位数字 ==0 example: 31056 当其百位为0时，有以下这些情况满足：
    100 ~   199
    1100 ~  1199
    30100 ~ 30199
  其余都不满足
因此，百位数为0的5位数字，共有(a/10)*100个数字满足要求
我们可以进一步统一以下表达方式，即当百位>=2或=0时，
有[(a+8)/10]*100，当百位=1时，有[(a+8)/10]*100+(b+1)。用代码表示就是： [(a+8)/10]*100+(a%10==1)?(b+1):0；
为什么要加8呢？因为只有大于2的时候才会产生进位等价于（a/10+1）
"""


class Solution:
    def NumberOf1Between1AndN_Solution(self, n):
        if n < 0:
            return 0
        m = 1
        count = 0
        while n // m > 0:
            count += (n // m % 10 == 1) * (n % m + 1) + (n // m + 8) // 10 * m
            m *= 10
        return count
